{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-sysidentpygui-documentation","title":"Welcome to SysIdentPyGUI documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>In this website is presented the documentation for SysIdentPyGUI, the graphical user interface for system identification using SysIdentPy. Here the user can learn through examples how to use the webapp for system identification and simulation in a variety of ways.</p> <p>Through SysIdentPyGUI, a system can be identified using NARMAX models, with Polynomial or Fourier basis functions, using advanced structure selection algorithms (FROLS, AOLS, MetaMSS or ER), combined with a wide range of metrics for posterior analysis and many other costumizable parameters.</p> <p>The user can also load a previously identified model, to validate and predict using a separate dataset, as well as simulating a predefined model through its equation.</p> <p>SysIdentPyGUI has an user friendly and straightforward interface, so that anyone can bring up their input and output data, and easily get a non-linear mathematical model that can describe their behaviour.</p>"},{"location":"#usage","title":"Usage","text":"<p>SysIdentPyGUI is currently hosted on Streamlit Cloud. You can run it locally on your machine via a containerized version through Docker by using the Dockerfile that is available, through the following commands:</p> <pre><code>docker build -t sysidenpygui .\n</code></pre> <p>The above command will build the Docker Image. Check the image by typing:</p> <pre><code>docker images\n</code></pre> <p>The <code>sysidentpygui</code> image should appear in the images list. Run the container with:</p> <pre><code>docker run -p 8501:8501 sysidentpygui\n</code></pre> <p>Alternatively, you can run the Streamlit application locally using:</p> <pre><code>streamlit run 1_\ud83d\udd0e_SysIdentPyGUI.py\n</code></pre>"},{"location":"#requirements-for-local-use","title":"Requirements for local use","text":"<p>SysIdentPyGUI requires the following modules for a local host:</p> <ul> <li>Python (&gt;= 3.10)</li> <li>Sysidentpy (&gt;= 0.3.1)</li> <li>Streamlit (&gt;= 1.14.0)</li> <li>Matplotlib (&gt;= 3.6.1)</li> <li>Numpy (&gt;= 1.23.4)</li> <li>Pandas (&gt;= 1.5.1)</li> <li>Pillow (&gt;= 9.4.0)</li> </ul> <p>Use <code>pip</code> to install the dependecies throught the <code>requirements.txt</code> file. If you choose to run the containerized version, the Dockerfile will install de dependencies for you.</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#project-history","title":"Project History","text":"<p>The project idea was given first by Samir A. M. Martins and Wilson R. L. Junior, as an use alternative for people that would like to use SysIdentPy toolbox but aren't familiar with Python, such as medical or economy students. As well as researchers that would like to use the functionalities in a rapid manner through their cellphone or such.</p> <p>The concept was then handed to Samir's student J\u00falio C. E. J\u00fanior, who started the development of the web app in the first half of 2022.</p> <p>SysIdentPyGUI was developed using Streamlit due to its practical syntax, constant updates and active community.</p>"},{"location":"about/#active-mainteners","title":"Active Mainteners","text":"<p>The project is maintained by J\u00falio C\u00e9sar Enezio J\u00fanior, under supervision of Samir Angelo Milani Martins and Wilson Rocha Lacerda Junior.</p>"},{"location":"about/#project-status","title":"Project Status","text":"<p>SysIdentPyGUI is currently hosted on Streamlit Cloud. A DockerFile is available in our repository allowing the user to run a local containerized version of the app.</p> <p>If you run into a bug or have a suggestion, please open a issue on our GitHub repository. We will try to answer you as soon as possible.</p>"},{"location":"about/#future","title":"Future","text":"<p>We aim to make SysIdentPyGUI as self-maintaining as possible and up to date comparing to SysIdentPy. Some features from SysIdentPy aren't available yet, like the Narx Neural Network. But they will be analyzed and deployed eventually.</p>"},{"location":"loadmodel/","title":"Loading a previously identified model","text":"<p>After using the System Identification section, the user can analyze a different dataset with the same model that was previously identified. Go to the Load your model page and proceed to load the model file that you downloaded beforehand and upload the new inout and output datasets that you want to use in your model.</p> <p></p> <p>After loading all the required files, the list of regressors and its parameters, as well as the metrics table, results plot and residues plot related to your new dataset will be shown below.</p> <p></p> <p></p>"},{"location":"simu/","title":"Simulating a predefined model","text":"<p>It might happen that the user has a NARMAX model equation that represents a phenomenum and would like to test a dataset in this scenario. This task can be easily performed using the Simulate a predefined model page through SysIdentPy's regressors codification.</p> <p>NOTE:  More information about the regressors codification and the parameters that can be set in the simulation page can be found in the SysIdentPy Documentation.</p> <p>First, load your dataset for the input and output.</p> <p></p> <p>Then proceed to set the nonlinear degree of your model and input the regressors list, each set at a time.</p> <p></p> <p>Enter the values for the parameters for each regressors set.</p> <p></p> <p>Configure the simulation and then click 'Simulate the model'.</p> <p></p> <p>The model equation that you entered will be displayed, and the metrics, results and residues plots will be shown, like in the other pages.</p> <p></p>"},{"location":"sysidmiso/","title":"System Identification Using a MISO System (Multiple Input/Single Output)","text":"<p>NOTE:  More information about the model setup parameters and its funcionalities can be found in the SysIdentPy Documentation.</p> <p>To identify a system using a dataset with multiple inputs and one output is really simple as well. We will use a dataset with two equal inputs formatted in a .csv file, where each input is in a column.</p> <p></p> <p>Going to the 'Model Setup' tab, you can change the specific lags for each one of the inputs separatedly.</p> <p></p> <p>You can notice that the results can be visualized the same way it was for the SISO model, but the model regressors now contain elements from both the inputs.</p> <p></p>"},{"location":"sysidsiso/","title":"System Identification Using a SISO System (Single Input/Single Output)","text":"<p>NOTE:  More information about the model setup parameters and its funcionalities can be found in the SysIdentPy Documentation.</p> <p>To identify a system using a dataset with one input and one output is really easy using SysIdentPyGUI. First, in the main page (SysIdentPyGUI), go to the first tab ('Load Data') and load your input data and output data using headless .csv files (drag to the box or click the 'Browse files' button):</p> <p></p> <p>Next, you should set the percentage of data that will be used for purposes of validation later.</p> <p>Moving to the next tab, 'Model Setup', the user can define the specific parameters related to the system identification process. First, the user should choose between Polynomial or Fourier basis function and set its parameters. For the sake of example, we will be using a second degree Polynomial basis function:</p> <p></p> <p>Going further down, the user has to decided between four model structure selection algorithms:</p> <ul> <li>Forward Regression Orthogonal Least Squares  (FROLS);</li> <li>Accelerated Orthogonal Least-Squares (AOLS);</li> <li>Meta-Model Structure Selection (MetaMSS);</li> <li>Entropic Regression (ER).</li> </ul> <p>Each one of this algorithms has its specifics parameters to be set, in this example we will be using AOLS:</p> <p></p> <p>The user can set the maximum lag for the input and output, and then choose the specifics lags that will be used for the combinations of possible regressors. For example, below we selected the maximum output lag as 4, but we didn't select the lag k=2. And for the input, the maximum lag is 5, but we will only use the lags k=1,3,5:</p> <p></p> <p>Continuing down the page, we can set the model type (NARMAX, NAR or NAFIR) and set the parameter estimator algorithm:</p> <p></p> <p>There is a bunch of parameters for each model structure selection algorithms to be set, and for better understading of the effect of each one in the final model, the user can refer to SysIdentPy Documentation. But for simplicity, the user could choose one of the compact forms from some of the four previously cited algorithms.</p> <p>At the bottom of the page, the user can choose between a 'Free Run' or a 'K-Steps Ahead' simulation.</p> <p>Moving to the 'Model Validation and Metrics' tab, the user gets a table with each regressor and its parameters from the final model. The number of regressors deppends of the model structure selection algorithms and each one of the previously setted parameters.</p> <p></p> <p>Below we have the Results plot:</p> <p></p> <p>The Residues plots:</p> <p></p> <p>And a table with the model specifics metrics:</p> <p></p> <p>The results with the same dataset can vary deppending of the algorithm used, the selected basis function, the choosen parameters or the type of run that is defined. So, the user could tweak the variables available for a better result.</p> <p>Lastly, in the 'Save Model' tab, the user can download a file containing the data of the identified system for posterior use in the 'Load your model' page.</p> <p></p>"}]}